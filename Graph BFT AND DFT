import java.util.*;

public class Main{
    
   static HashMap<Integer,HashMap<Integer,Integer>> map;
    
    public Main(int v){
        this.map = new HashMap<>();
        for(int i=1;i<=v;i++){
            map.put(i,new HashMap<>());
        }
    }
    
    public static void AddEdge(int v1,int v2,int cost){
        map.get(v1).put(v2,cost);
        map.get(v2).put(v1,cost);
    }
    
    public static void BFT(int v){
        LinkedList<Integer> qq = new LinkedList<>();
        HashSet<Integer> visited = new HashSet<>();
        
        for(int i=1;i<=v;i++){
            if(visited.contains(i)){
                continue;
            }
            qq.add(i);
            while(!qq.isEmpty()){
                int r = qq.remove();
                if(visited.contains(r)){
                    continue;
                }
                System.out.print(r+" ");
                visited.add(r);
                for(int nbrs:map.get(r).keySet()){
                    if(!visited.contains(nbrs)){
                        qq.add(nbrs);
                    }
                }
            }
        }
    }
    
    
     public static void DFT(int v){
        Stack<Integer> st = new Stack<>();
        HashSet<Integer> visited = new HashSet<>();
        
        for(int i=1;i<=v;i++){
            if(visited.contains(i)){
                continue;
            }
            st.push(i);
            while(!st.isEmpty()){
                int r = st.pop();
                if(visited.contains(r)){
                    continue;
                }
                System.out.print(r+" ");
                visited.add(r);
                for(int nbrs:map.get(r).keySet()){
                    if(!visited.contains(nbrs)){
                        st.push(nbrs);
                    }
                }
            }
        }
    }
    
    public static void main(String args[]){
        Main obj = new Main(7);
        AddEdge(1,4,6);
		AddEdge(1,2,10);
	 	AddEdge(2,3,7);
	 	AddEdge(3,4,5);
		AddEdge(5,6,4);
	 	AddEdge(7,5,2);
	 	AddEdge(6,7,3);
		AddEdge(4,5,1);
		BFT(7);
		System.out.println();
		DFT(7);
    }
}
